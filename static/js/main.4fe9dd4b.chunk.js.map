{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","url","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","trim","isNotValid","includes","test","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","initMovie","newMovie","setNewMovie","handler","prevMovie","submitDisables","onSubmit","preventDefault","prevCount","disabled","App","moviesFromServer","setNewMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4fe9dd4b.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange: (newName: string, newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nconst validation = (url: string): boolean => {\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  return pattern.test(url);\n};\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value.trim();\n\n  const isValidLabels = ['imgUrl', 'imdbUrl'].includes(name);\n  const isNotValid = isValidLabels && touched && !validation(value.trim());\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          name={name}\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => {\n            onChange(event.target.name, event.target.value);\n          }}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {isNotValid && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (NewMovie: Movie) => void\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const initMovie = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  };\n\n  const [newMovie, setNewMovie] = useState(initMovie);\n  const handler = (name: string, value: string) => {\n    setNewMovie(prevMovie => ({\n      ...prevMovie,\n      [name]: value,\n    }));\n  };\n\n  const resetForm = () => {\n    setNewMovie(initMovie);\n  };\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    onAdd(newMovie);\n\n    resetForm();\n    setCount(prevCount => prevCount + 1);\n  };\n\n  const submitDisables = !newMovie.title || !newMovie.imgUrl\n  || !newMovie.imdbUrl || !newMovie.imdbId;\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={onSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        onChange={handler}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={newMovie.description}\n        onChange={handler}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        onChange={handler}\n        required\n\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        onChange={handler}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        onChange={handler}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={submitDisables}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setNewMovies] = useState([...moviesFromServer]);\n\n  const addNewMovie = (newMovie: Movie) => {\n    setNewMovies(prevMovies => ([\n      ...prevMovies,\n      newMovie,\n    ]));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addNewMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}