{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","constants/pattern.ts","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","pattern","RegExp","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","errorMessage","setErrorMessage","htmlFor","type","classNames","event","onBlur","match","NewMovie","onAdd","count","setCount","initMovie","newMovie","setNewMovie","handleMovieChange","key","prevMovie","target","isDisabled","trim","onSubmit","preventDefault","test","prevCount","e","disabled","App","moviesFromServer","setNewMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f84b0f2f.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","export const pattern = new RegExp(\n  '^('\n    + '((([A-Za-z]{3,9}:(?:\\\\/\\\\/)?)'\n    + '(?:[-;:&=+$,\\\\w]+@)?'\n    + '[A-Za-z0-9.-]+)|'\n    + '(?:www\\\\.|[-;:&=+$,\\\\w]+@)'\n    + '[A-Za-z0-9.-]+)'\n    + '((?:\\\\/[+~%\\\\/.\\\\w-_]*)?'\n    + '\\\\??(?:[-+=&;%@,.\\\\w_]*)#?(?:[,.!/\\\\\\\\\\\\w]*))?'\n    + ')$',\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { pattern } from '../../constants/pattern';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toFixed(16).slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event);\n    setErrorMessage('');\n  };\n\n  const handleOnBlur = () => {\n    if (value === '' && name !== 'description') {\n      setErrorMessage(`${label} is required`);\n    }\n\n    if ((name === 'imgUrl' && !value.match(pattern) && value !== '')\n    || (name === 'imdbUrl' && !value.match(pattern) && value !== '')) {\n      setErrorMessage(`${label} is not a valid URL`);\n    }\n\n    setTouched(true);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || errorMessage,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleOnChange}\n          onBlur={handleOnBlur}\n        />\n      </div>\n\n      {(hasError || errorMessage) && (\n        <p className=\"help is-danger\">{`${label} is invalid`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { pattern } from '../../constants/pattern';\n\ntype Props = {\n  onAdd: (NewMovie: Movie) => void\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const initMovie = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  };\n\n  const [newMovie, setNewMovie] = useState(initMovie);\n  const handleMovieChange = (event: React.ChangeEvent<HTMLInputElement>,\n    key: keyof Movie) => {\n    setNewMovie(prevMovie => (\n      { ...prevMovie, [key]: event.target.value }\n    ));\n  };\n\n  const resetForm = () => {\n    setNewMovie(initMovie);\n  };\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!pattern.test(newMovie.imdbUrl)) {\n      return;\n    }\n\n    if (!pattern.test(newMovie.imgUrl)) {\n      return;\n    }\n\n    onAdd(newMovie);\n\n    resetForm();\n    setCount(prevCount => prevCount + 1);\n  };\n\n  const isDisabled = !newMovie.title.trim()\n  || !newMovie.imgUrl.trim()\n  || !newMovie.imdbUrl.trim()\n  || !newMovie.imdbId.trim()\n  || !newMovie.imdbUrl.match(pattern)\n  || !newMovie.imgUrl.match(pattern);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={onSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        onChange={e => handleMovieChange(e, 'title')}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={newMovie.description}\n        onChange={e => handleMovieChange(e, 'description')}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        onChange={e => handleMovieChange(e, 'imgUrl')}\n        required\n\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        onChange={e => handleMovieChange(e, 'imdbUrl')}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        onChange={e => handleMovieChange(e, 'imdbId')}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setNewMovies] = useState(moviesFromServer);\n\n  const addNewMovie = (newMovie: Movie) => {\n    setNewMovies(prevMovies => ([\n      ...prevMovies,\n      newMovie,\n    ]));\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addNewMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}